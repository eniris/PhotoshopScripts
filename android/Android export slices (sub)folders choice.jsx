/*******************************************************  Eniris  2013-03-12  Batch export layers or layergroups named "name:" to PNG files  export to sub-folder : layer group name : "export@your-sub-folder-name"  export png : "name:your-png-name"   *  Script by Tomek Cejner (tomek (at) japko dot info) *  based on work of Damien van Holten: *  http://www.damienvanholten.com/blog/export-groups-to-files-photoshop/  ********************************************************/// enable double clicking from the // Macintosh Finder or the Windows Explorer#target photoshop// Make Photoshop the frontmost applicationapp.bringToFront();function main(){    if(!documents.length) return;    // Save the current preferences    var startRulerUnits = app.preferences.rulerUnits;    var startTypeUnits = app.preferences.typeUnits;    var startDisplayDialogs = app.displayDialogs;    // Set Adobe Photoshop to use pixels and display no dialogs    app.preferences.rulerUnits = Units.PIXELS;    app.preferences.typeUnits = TypeUnits.PIXELS;    app.displayDialogs = DialogModes.NO;        // Document reference    var doc = app.activeDocument;    var oldPath = app.activeDocument.path;    var destFolder = app.activeDocument.fullName.parent;        // Ask user for input folder    var oldPath = Folder.selectDialog("Select a folder to process");    if (oldPath == null) throw "No folder selected. Exting script.";    var outFolder = new Folder(oldPath + "/elements/");    if (!outFolder.exists) {        outFolder.create();    }    scanLayerSets(doc, "");    function scanLayerSets(el,folder) {        // find layer groups        for(var a=0;a<el.layerSets.length;a++){            var lname = el.layerSets[a].name;                    //if (lname.substr(0,7) == "export@") {            if (lname.substr(0,5) == "name:") {                newname = lname.slice(5)+".png";                saveLayer(el.layers.getByName(lname), folder+newname, oldPath, true);                            } else {                // recursive                var lname = el.layerSets[a].name;                var newname = lname.slice(7);                if (lname.substr(0,7) == "export@") {                    newfolder = folder +newname+"/";                }                if (!Folder(oldPath + "/elements/"+newfolder).exists) {                    Folder(oldPath + "/elements/"+newfolder).create();                }                scanLayerSets(el.layerSets[a],newfolder);            }        }                // find plain layers in current group whose names end with .png        for(var j=0; j<el.artLayers.length; j++) {            var name = el.artLayers[j].name;            if (name.substr(0,5) == "name:") {                newname = name.slice(5)+".png";                saveLayer(el.layers.getByName(name), newname, oldPath, false);            }        }    }    function saveLayer(layer, lname, path, shouldMerge) {        activeDocument.activeLayer = layer;        dupLayers();        if (shouldMerge === undefined || shouldMerge === true) {            activeDocument.mergeVisibleLayers();        }        activeDocument.trim(TrimType.TRANSPARENT,true,true,true,true);        var saveFile= File(path + "/elements-slices/" + lname);        SavePNG(saveFile);        app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);    }    // Reset the application preferences    app.preferences.rulerUnits = startRulerUnits;    app.preferences.typeUnits = startTypeUnits;    app.displayDialogs = startDisplayDialogs;	alert("Batch export done.");};main();function dupLayers() {         var amActionDesc = new ActionDescriptor();    var amActionRef = new ActionReference();        amActionRef.putClass(charIDToTypeID('Dcmn'));    amActionDesc.putReference(charIDToTypeID('null'), amActionRef);    amActionDesc.putString(charIDToTypeID('Nm  '), activeDocument.activeLayer.name);        var amActionRefDup = new ActionReference();        amActionRefDup.putEnumerated(charIDToTypeID('Lyr '), charIDToTypeID('Ordn'), charIDToTypeID('Trgt'));    amActionDesc.putReference(charIDToTypeID('Usng'), amActionRefDup);    executeAction(charIDToTypeID('Mk  '), amActionDesc, DialogModes.NO);    };function SavePNG(saveFile){        var pngOpts = new ExportOptionsSaveForWeb;         pngOpts.format = SaveDocumentType.PNG    pngOpts.PNG8 = false;     pngOpts.transparency = true;     pngOpts.interlaced = false;     pngOpts.quality = 100;        activeDocument.exportDocument(new File(saveFile),ExportType.SAVEFORWEB,pngOpts); }